---
title: "What time should I leave?"
author: "A PUBH 7462 student"
format: 
  html:
    embed-resources: true
editor: visual
---

## Repeat of 1.3 from Homework 6

## Set up
```{r}
library(ggthemes)
library(tidycensus)
library(tidyverse)
library(ggmap)
library(plotly)
library(osmdata)
library(janitor)
library(leaflet)
library(htmltools)
library(sf)
```


## Load the API key

```{r}
api_key <- Sys.getenv("MAPS_API_KEY")
```


# Question 1.3

```{r, include=FALSE}

census_api_key(api_key)

mn_span.df <- get_acs(
  geography = "tract",
  variables = "B06007_003", #Code for est total speak spanish
  state     = "MN",
  county    = "Hennepin",
  year      = 2020,
  geometry  = TRUE
)

mn_span_plot.df <- mn_span.df %>%
  mutate(text = str_extract(NAME, ".*?(?=,)")) %>%
  mutate(text_label = str_c("Spanish speakers in ", text, ":", "\n", estimate))


span_plot.gg <- ggplot() +
  geom_sf(data = mn_span_plot.df, 
          aes(fill = estimate, text = text_label),
           size = 0.1, color = "black") +
  scale_fill_viridis_c(option = "plasma") +
  theme_map()

ggplotly(span_plot.gg, tooltip = "text",
         height = 600,
         width = 800) 

mn.box           <- osmdata::getbb("minnesota")
hennepin.box     <- osmdata::getbb("hennepin")


hennepin.map <- get_map(
  location = hennepin.box,
  source   = "stamen",
  maptype  = "terrain",
  crop = TRUE
)

hennepin_base.gg <- ggmap(hennepin.map) +
  theme_map()

mn_span.ggmap <- hennepin_base.gg +
  geom_sf(data = mn_span_plot.df,
          aes(fill = estimate, text = estimate),
          size = 0.1,
          inherit.aes = FALSE) +
  scale_fill_viridis_c(option = "plasma") +
  theme_map() +
  labs(fill = "Estimated Spanish Speakers", main = "Spanish speakers in Hennepin County, MN")


```

```{r}
ggplotly(mn_span.ggmap, 
         tooltip = "text",
         height = 600, width = 800) %>%
  style(hoveron ="fill") %>%
  layout(legend = list(orientation = 'h'))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: false

source("drive_times_setup.R")



## Set origin and destination
## Change these to your own selections!
ORIG <- "2221 University Ave SE, Minneapolis, MN"
DEST <- "4940 France Ave S, Minneapolis, MN"
```



```{r, eval=FALSE, echo=FALSE}


library(leaflet)
library(gepaf)

data <- decodePolyline(get_route_polyline(ORIG, DEST)$points)

leaflet() %>% addProviderTiles(provider = "OpenStreetMap") %>%
  addPolylines(data = data, 
                lng = ~lon,
               lat = ~lat)
```

## Driving Times

```{r}
#| eval: false
#| include: false


## Pick the times at which to generate travel times
times_to_check <- Sys.time() + c(0, 15, 30, 45, 60)*60

## Get the drive times
drive_times <- map_dfr(times_to_check, get_travel_times, 
                       orig = ORIG,
                        dest = DEST)

## Produce the drive times plot
drive_times %>% 
  pivot_longer(-departure_time, names_to = "estimate_type", values_to = "estimate") %>%
  group_by(estimate_type) %>%
  mutate(is_type_min = (estimate == min(estimate))) %>%
  ungroup() %>%
  mutate(type_descriptor = factor(estimate_type, labels = c("glass half full", "optimists", "pessimists"))) %>%
# label = ifelse(estimate == min(estimate), sprintf("Best time for %s")))
#   mutate(pessimist_label = ifelse(pessimistic == min(pessimistic), "Best time\nfor pessimists", ""),
#          optimist_label = ifelse(optimistic == min(optimistic), "Best time\nfor optimists", "")) %>%
  ggplot(aes(x = departure_time, y = estimate, color = estimate_type)) +
  geom_line() +
  geom_point(aes(alpha = is_type_min), size = 3) +
  geom_vline(aes(xintercept = departure_time, alpha = is_type_min, color = estimate_type), linetype = "dashed") +
  scale_color_manual(values = c("black", "green", "red")) +
  scale_alpha_manual(values = c(0,1)) +
  geom_text(data = function(x) { 
    x %>% arrange(estimate_type) %>% 
      filter(is_type_min) %>% 
      mutate(label = sprintf("Best time for %s", type_descriptor))
    },
            aes(y = median(estimate), label = label), angle = 90, hjust = 0, nudge_y = mean(drive_times$best_guess)*0.05,
            nudge_x = 100) +
  guides(alpha = "none") +
  theme_minimal() +
  ylab("Minutes") +
  xlab("Departure time")
```
